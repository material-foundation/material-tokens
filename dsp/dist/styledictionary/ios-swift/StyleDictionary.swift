
//
// StyleDictionary.swift
//

// Do not edit directly
// Generated on Tue, 15 Aug 2023 03:43:46 GMT


import UIKit

public class StyleDictionary {
    public static let gkvRefPaletteBlack = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Black */
    public static let gkvRefPaletteError0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Error 0 */
    public static let gkvRefPaletteError10 = UIColor(red: 0.255, green: 0.055, blue: 0.043, alpha: 1) /* Error 10 */
    public static let gkvRefPaletteError100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Error 100 */
    public static let gkvRefPaletteError20 = UIColor(red: 0.376, green: 0.078, blue: 0.063, alpha: 1) /* Error 20 */
    public static let gkvRefPaletteError30 = UIColor(red: 0.549, green: 0.114, blue: 0.094, alpha: 1) /* Error 30 */
    public static let gkvRefPaletteError40 = UIColor(red: 0.702, green: 0.149, blue: 0.118, alpha: 1) /* Error 40 */
    public static let gkvRefPaletteError50 = UIColor(red: 0.863, green: 0.212, blue: 0.180, alpha: 1) /* Error 50 */
    public static let gkvRefPaletteError60 = UIColor(red: 0.894, green: 0.412, blue: 0.384, alpha: 1) /* Error 60 */
    public static let gkvRefPaletteError70 = UIColor(red: 0.925, green: 0.573, blue: 0.557, alpha: 1) /* Error 70 */
    public static let gkvRefPaletteError80 = UIColor(red: 0.949, green: 0.722, blue: 0.710, alpha: 1) /* Error 80 */
    public static let gkvRefPaletteError90 = UIColor(red: 0.976, green: 0.871, blue: 0.863, alpha: 1) /* Error 90 */
    public static let gkvRefPaletteError95 = UIColor(red: 0.988, green: 0.933, blue: 0.933, alpha: 1) /* Error 95 */
    public static let gkvRefPaletteError99 = UIColor(red: 1.000, green: 0.984, blue: 0.976, alpha: 1) /* Error 99 */
    public static let gkvRefPaletteNeutral0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Neutral 0 */
    public static let gkvRefPaletteNeutral10 = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* Neutral 10 */
    public static let gkvRefPaletteNeutral100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Neutral 100 */
    public static let gkvRefPaletteNeutral20 = UIColor(red: 0.192, green: 0.188, blue: 0.200, alpha: 1) /* Neutral 20 */
    public static let gkvRefPaletteNeutral30 = UIColor(red: 0.282, green: 0.275, blue: 0.286, alpha: 1) /* Neutral 30 */
    public static let gkvRefPaletteNeutral40 = UIColor(red: 0.376, green: 0.365, blue: 0.384, alpha: 1) /* Neutral 40 */
    public static let gkvRefPaletteNeutral50 = UIColor(red: 0.471, green: 0.459, blue: 0.475, alpha: 1) /* Neutral 50 */
    public static let gkvRefPaletteNeutral60 = UIColor(red: 0.576, green: 0.565, blue: 0.580, alpha: 1) /* Neutral 60 */
    public static let gkvRefPaletteNeutral70 = UIColor(red: 0.682, green: 0.667, blue: 0.682, alpha: 1) /* Neutral 70 */
    public static let gkvRefPaletteNeutral80 = UIColor(red: 0.788, green: 0.773, blue: 0.792, alpha: 1) /* Neutral 80 */
    public static let gkvRefPaletteNeutral90 = UIColor(red: 0.902, green: 0.882, blue: 0.898, alpha: 1) /* Neutral 90 */
    public static let gkvRefPaletteNeutral95 = UIColor(red: 0.957, green: 0.937, blue: 0.957, alpha: 1) /* Neutral 95 */
    public static let gkvRefPaletteNeutral99 = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Neutral 99 */
    public static let gkvRefPaletteNeutralVariant0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Neutral Variant 0 */
    public static let gkvRefPaletteNeutralVariant10 = UIColor(red: 0.114, green: 0.102, blue: 0.133, alpha: 1) /* Neutral Variant 10 */
    public static let gkvRefPaletteNeutralVariant100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Neutral Variant 100 */
    public static let gkvRefPaletteNeutralVariant20 = UIColor(red: 0.196, green: 0.184, blue: 0.216, alpha: 1) /* Neutral Variant 20 */
    public static let gkvRefPaletteNeutralVariant30 = UIColor(red: 0.286, green: 0.271, blue: 0.310, alpha: 1) /* Neutral Variant 30 */
    public static let gkvRefPaletteNeutralVariant40 = UIColor(red: 0.376, green: 0.365, blue: 0.400, alpha: 1) /* Neutral Variant 40 */
    public static let gkvRefPaletteNeutralVariant50 = UIColor(red: 0.475, green: 0.455, blue: 0.494, alpha: 1) /* Neutral Variant 50 */
    public static let gkvRefPaletteNeutralVariant60 = UIColor(red: 0.576, green: 0.561, blue: 0.600, alpha: 1) /* Neutral Variant 60 */
    public static let gkvRefPaletteNeutralVariant70 = UIColor(red: 0.682, green: 0.663, blue: 0.706, alpha: 1) /* Neutral Variant 70 */
    public static let gkvRefPaletteNeutralVariant80 = UIColor(red: 0.792, green: 0.769, blue: 0.816, alpha: 1) /* Neutral Variant 80 */
    public static let gkvRefPaletteNeutralVariant90 = UIColor(red: 0.906, green: 0.878, blue: 0.925, alpha: 1) /* Neutral Variant 90 */
    public static let gkvRefPaletteNeutralVariant95 = UIColor(red: 0.961, green: 0.933, blue: 0.980, alpha: 1) /* Neutral Variant 95 */
    public static let gkvRefPaletteNeutralVariant99 = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Neutral Variant 99 */
    public static let gkvRefPalettePrimary0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Primary 0 */
    public static let gkvRefPalettePrimary10 = UIColor(red: 0.129, green: 0.000, blue: 0.365, alpha: 1) /* Primary 10 */
    public static let gkvRefPalettePrimary100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Primary 100 */
    public static let gkvRefPalettePrimary20 = UIColor(red: 0.220, green: 0.118, blue: 0.447, alpha: 1) /* Primary 20 */
    public static let gkvRefPalettePrimary30 = UIColor(red: 0.310, green: 0.216, blue: 0.545, alpha: 1) /* Primary 30 */
    public static let gkvRefPalettePrimary40 = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Primary 40 */
    public static let gkvRefPalettePrimary50 = UIColor(red: 0.498, green: 0.404, blue: 0.745, alpha: 1) /* Primary 50 */
    public static let gkvRefPalettePrimary60 = UIColor(red: 0.604, green: 0.510, blue: 0.859, alpha: 1) /* Primary 60 */
    public static let gkvRefPalettePrimary70 = UIColor(red: 0.714, green: 0.616, blue: 0.973, alpha: 1) /* Primary 70 */
    public static let gkvRefPalettePrimary80 = UIColor(red: 0.816, green: 0.737, blue: 1.000, alpha: 1) /* Primary 80 */
    public static let gkvRefPalettePrimary90 = UIColor(red: 0.918, green: 0.867, blue: 1.000, alpha: 1) /* Primary 90 */
    public static let gkvRefPalettePrimary95 = UIColor(red: 0.965, green: 0.929, blue: 1.000, alpha: 1) /* Primary 95 */
    public static let gkvRefPalettePrimary99 = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Primary 99 */
    public static let gkvRefPaletteSecondary0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Secondary 0 */
    public static let gkvRefPaletteSecondary10 = UIColor(red: 0.114, green: 0.098, blue: 0.169, alpha: 1) /* Secondary 10 */
    public static let gkvRefPaletteSecondary100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Secondary 100 */
    public static let gkvRefPaletteSecondary20 = UIColor(red: 0.200, green: 0.176, blue: 0.255, alpha: 1) /* Secondary 20 */
    public static let gkvRefPaletteSecondary30 = UIColor(red: 0.290, green: 0.267, blue: 0.345, alpha: 1) /* Secondary 30 */
    public static let gkvRefPaletteSecondary40 = UIColor(red: 0.384, green: 0.357, blue: 0.443, alpha: 1) /* Secondary 40 */
    public static let gkvRefPaletteSecondary50 = UIColor(red: 0.478, green: 0.447, blue: 0.537, alpha: 1) /* Secondary 50 */
    public static let gkvRefPaletteSecondary60 = UIColor(red: 0.584, green: 0.553, blue: 0.647, alpha: 1) /* Secondary 60 */
    public static let gkvRefPaletteSecondary70 = UIColor(red: 0.690, green: 0.655, blue: 0.753, alpha: 1) /* Secondary 70 */
    public static let gkvRefPaletteSecondary80 = UIColor(red: 0.800, green: 0.761, blue: 0.863, alpha: 1) /* Secondary 80 */
    public static let gkvRefPaletteSecondary90 = UIColor(red: 0.910, green: 0.871, blue: 0.973, alpha: 1) /* Secondary 90 */
    public static let gkvRefPaletteSecondary95 = UIColor(red: 0.965, green: 0.929, blue: 1.000, alpha: 1) /* Secondary 95 */
    public static let gkvRefPaletteSecondary99 = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Secondary 99 */
    public static let gkvRefPaletteTertiary0 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Tertiary 0 */
    public static let gkvRefPaletteTertiary10 = UIColor(red: 0.192, green: 0.067, blue: 0.114, alpha: 1) /* Tertiary 10 */
    public static let gkvRefPaletteTertiary100 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* Tertiary 100 */
    public static let gkvRefPaletteTertiary20 = UIColor(red: 0.286, green: 0.145, blue: 0.196, alpha: 1) /* Tertiary 20 */
    public static let gkvRefPaletteTertiary30 = UIColor(red: 0.388, green: 0.231, blue: 0.282, alpha: 1) /* Tertiary 30 */
    public static let gkvRefPaletteTertiary40 = UIColor(red: 0.490, green: 0.322, blue: 0.376, alpha: 1) /* Tertiary 40 */
    public static let gkvRefPaletteTertiary50 = UIColor(red: 0.596, green: 0.412, blue: 0.467, alpha: 1) /* Tertiary 50 */
    public static let gkvRefPaletteTertiary60 = UIColor(red: 0.710, green: 0.514, blue: 0.573, alpha: 1) /* Tertiary 60 */
    public static let gkvRefPaletteTertiary70 = UIColor(red: 0.824, green: 0.616, blue: 0.675, alpha: 1) /* Tertiary 70 */
    public static let gkvRefPaletteTertiary80 = UIColor(red: 0.937, green: 0.722, blue: 0.784, alpha: 1) /* Tertiary 80 */
    public static let gkvRefPaletteTertiary90 = UIColor(red: 1.000, green: 0.847, blue: 0.894, alpha: 1) /* Tertiary 90 */
    public static let gkvRefPaletteTertiary95 = UIColor(red: 1.000, green: 0.925, blue: 0.945, alpha: 1) /* Tertiary 95 */
    public static let gkvRefPaletteTertiary99 = UIColor(red: 1.000, green: 0.984, blue: 0.980, alpha: 1) /* Tertiary 99 */
    public static let gkvRefPaletteWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* White */
    public static let gkvRefTypefaceBrand = Roboto /* Brand typeface */
    public static let gkvRefTypefacePlain = Roboto /* Plain typeface */
    public static let gkvRefTypefaceWeightBold = 700 /* Bold weight */
    public static let gkvRefTypefaceWeightMedium = 500 /* Medium weight */
    public static let gkvRefTypefaceWeightRegular = 400 /* Regular weight */
    public static let gkvSysColorBackground = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Background */
    public static let gkvSysColorBackgroundDark = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* Background */
    public static let gkvSysColorBackgroundLight = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Background */
    public static let gkvSysColorError = UIColor(red: 0.702, green: 0.149, blue: 0.118, alpha: 1) /* Error */
    public static let gkvSysColorErrorContainer = UIColor(red: 0.976, green: 0.871, blue: 0.863, alpha: 1) /* Error container */
    public static let gkvSysColorErrorContainerDark = UIColor(red: 0.549, green: 0.114, blue: 0.094, alpha: 1) /* Error container */
    public static let gkvSysColorErrorContainerLight = UIColor(red: 0.976, green: 0.871, blue: 0.863, alpha: 1) /* Error container */
    public static let gkvSysColorErrorDark = UIColor(red: 0.949, green: 0.722, blue: 0.710, alpha: 1) /* Error */
    public static let gkvSysColorErrorLight = UIColor(red: 0.702, green: 0.149, blue: 0.118, alpha: 1) /* Error */
    public static let gkvSysColorInverseOnSurface = UIColor(red: 0.957, green: 0.937, blue: 0.957, alpha: 1) /* Inverse on surface */
    public static let gkvSysColorInverseOnSurfaceDark = UIColor(red: 0.192, green: 0.188, blue: 0.200, alpha: 1) /* Inverse on surface */
    public static let gkvSysColorInverseOnSurfaceLight = UIColor(red: 0.957, green: 0.937, blue: 0.957, alpha: 1) /* Inverse on surface */
    public static let gkvSysColorInversePrimary = UIColor(red: 0.816, green: 0.737, blue: 1.000, alpha: 1) /* Inverse primary */
    public static let gkvSysColorInversePrimaryDark = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Inverse primary */
    public static let gkvSysColorInversePrimaryLight = UIColor(red: 0.816, green: 0.737, blue: 1.000, alpha: 1) /* Inverse primary */
    public static let gkvSysColorInverseSurface = UIColor(red: 0.192, green: 0.188, blue: 0.200, alpha: 1) /* Inverse surface */
    public static let gkvSysColorInverseSurfaceDark = UIColor(red: 0.902, green: 0.882, blue: 0.898, alpha: 1) /* Inverse surface */
    public static let gkvSysColorInverseSurfaceLight = UIColor(red: 0.192, green: 0.188, blue: 0.200, alpha: 1) /* Inverse surface */
    public static let gkvSysColorOnBackground = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* On background */
    public static let gkvSysColorOnBackgroundDark = UIColor(red: 0.902, green: 0.882, blue: 0.898, alpha: 1) /* On background */
    public static let gkvSysColorOnBackgroundLight = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* On background */
    public static let gkvSysColorOnError = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On error */
    public static let gkvSysColorOnErrorContainer = UIColor(red: 0.255, green: 0.055, blue: 0.043, alpha: 1) /* On error container */
    public static let gkvSysColorOnErrorContainerDark = UIColor(red: 0.949, green: 0.722, blue: 0.710, alpha: 1) /* On error container */
    public static let gkvSysColorOnErrorContainerLight = UIColor(red: 0.255, green: 0.055, blue: 0.043, alpha: 1) /* On error container */
    public static let gkvSysColorOnErrorDark = UIColor(red: 0.376, green: 0.078, blue: 0.063, alpha: 1) /* On error */
    public static let gkvSysColorOnErrorLight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On error */
    public static let gkvSysColorOnPrimary = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On primary */
    public static let gkvSysColorOnPrimaryContainer = UIColor(red: 0.129, green: 0.000, blue: 0.365, alpha: 1) /* On primary container */
    public static let gkvSysColorOnPrimaryContainerDark = UIColor(red: 0.918, green: 0.867, blue: 1.000, alpha: 1) /* On primary container */
    public static let gkvSysColorOnPrimaryContainerLight = UIColor(red: 0.129, green: 0.000, blue: 0.365, alpha: 1) /* On primary container */
    public static let gkvSysColorOnPrimaryDark = UIColor(red: 0.220, green: 0.118, blue: 0.447, alpha: 1) /* On primary */
    public static let gkvSysColorOnPrimaryLight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On primary */
    public static let gkvSysColorOnSecondary = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On secondary */
    public static let gkvSysColorOnSecondaryContainer = UIColor(red: 0.114, green: 0.098, blue: 0.169, alpha: 1) /* On secondary container */
    public static let gkvSysColorOnSecondaryContainerDark = UIColor(red: 0.910, green: 0.871, blue: 0.973, alpha: 1) /* On secondary container */
    public static let gkvSysColorOnSecondaryContainerLight = UIColor(red: 0.114, green: 0.098, blue: 0.169, alpha: 1) /* On secondary container */
    public static let gkvSysColorOnSecondaryDark = UIColor(red: 0.200, green: 0.176, blue: 0.255, alpha: 1) /* On secondary */
    public static let gkvSysColorOnSecondaryLight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On secondary */
    public static let gkvSysColorOnSurface = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* On surface */
    public static let gkvSysColorOnSurfaceDark = UIColor(red: 0.902, green: 0.882, blue: 0.898, alpha: 1) /* On surface */
    public static let gkvSysColorOnSurfaceLight = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* On surface */
    public static let gkvSysColorOnSurfaceVariant = UIColor(red: 0.286, green: 0.271, blue: 0.310, alpha: 1) /* On surface variant */
    public static let gkvSysColorOnSurfaceVariantDark = UIColor(red: 0.792, green: 0.769, blue: 0.816, alpha: 1) /* On surface variant */
    public static let gkvSysColorOnSurfaceVariantLight = UIColor(red: 0.286, green: 0.271, blue: 0.310, alpha: 1) /* On surface variant */
    public static let gkvSysColorOnTertiary = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On tertiary */
    public static let gkvSysColorOnTertiaryContainer = UIColor(red: 0.192, green: 0.067, blue: 0.114, alpha: 1) /* On tertiary container */
    public static let gkvSysColorOnTertiaryContainerDark = UIColor(red: 1.000, green: 0.847, blue: 0.894, alpha: 1) /* On tertiary container */
    public static let gkvSysColorOnTertiaryContainerLight = UIColor(red: 0.192, green: 0.067, blue: 0.114, alpha: 1) /* On tertiary container */
    public static let gkvSysColorOnTertiaryDark = UIColor(red: 0.286, green: 0.145, blue: 0.196, alpha: 1) /* On tertiary */
    public static let gkvSysColorOnTertiaryLight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1) /* On tertiary */
    public static let gkvSysColorOutline = UIColor(red: 0.475, green: 0.455, blue: 0.494, alpha: 1) /* Outline */
    public static let gkvSysColorOutlineDark = UIColor(red: 0.576, green: 0.561, blue: 0.600, alpha: 1) /* Outline */
    public static let gkvSysColorOutlineLight = UIColor(red: 0.475, green: 0.455, blue: 0.494, alpha: 1) /* Outline */
    public static let gkvSysColorPrimary = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Primary */
    public static let gkvSysColorPrimaryContainer = UIColor(red: 0.918, green: 0.867, blue: 1.000, alpha: 1) /* Primary container */
    public static let gkvSysColorPrimaryContainerDark = UIColor(red: 0.310, green: 0.216, blue: 0.545, alpha: 1) /* Primary container */
    public static let gkvSysColorPrimaryContainerLight = UIColor(red: 0.918, green: 0.867, blue: 1.000, alpha: 1) /* Primary container */
    public static let gkvSysColorPrimaryDark = UIColor(red: 0.816, green: 0.737, blue: 1.000, alpha: 1) /* Primary */
    public static let gkvSysColorPrimaryLight = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Primary */
    public static let gkvSysColorSecondary = UIColor(red: 0.384, green: 0.357, blue: 0.443, alpha: 1) /* Secondary */
    public static let gkvSysColorSecondaryContainer = UIColor(red: 0.910, green: 0.871, blue: 0.973, alpha: 1) /* Secondary container */
    public static let gkvSysColorSecondaryContainerDark = UIColor(red: 0.290, green: 0.267, blue: 0.345, alpha: 1) /* Secondary container */
    public static let gkvSysColorSecondaryContainerLight = UIColor(red: 0.910, green: 0.871, blue: 0.973, alpha: 1) /* Secondary container */
    public static let gkvSysColorSecondaryDark = UIColor(red: 0.800, green: 0.761, blue: 0.863, alpha: 1) /* Secondary */
    public static let gkvSysColorSecondaryLight = UIColor(red: 0.384, green: 0.357, blue: 0.443, alpha: 1) /* Secondary */
    public static let gkvSysColorShadow = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Shadow */
    public static let gkvSysColorShadowDark = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Shadow */
    public static let gkvSysColorShadowLight = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1) /* Shadow */
    public static let gkvSysColorSurface = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Surface */
    public static let gkvSysColorSurfaceDark = UIColor(red: 0.110, green: 0.106, blue: 0.122, alpha: 1) /* Surface */
    public static let gkvSysColorSurfaceLight = UIColor(red: 1.000, green: 0.984, blue: 0.996, alpha: 1) /* Surface */
    public static let gkvSysColorSurfaceTint = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Surface tint */
    public static let gkvSysColorSurfaceTintDark = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Surface tint */
    public static let gkvSysColorSurfaceTintLight = UIColor(red: 0.404, green: 0.314, blue: 0.643, alpha: 1) /* Surface tint */
    public static let gkvSysColorSurfaceVariant = UIColor(red: 0.906, green: 0.878, blue: 0.925, alpha: 1) /* Surface Variant */
    public static let gkvSysColorSurfaceVariantDark = UIColor(red: 0.286, green: 0.271, blue: 0.310, alpha: 1) /* Surface Variant */
    public static let gkvSysColorSurfaceVariantLight = UIColor(red: 0.906, green: 0.878, blue: 0.925, alpha: 1) /* Surface Variant */
    public static let gkvSysColorTertiary = UIColor(red: 0.490, green: 0.322, blue: 0.376, alpha: 1) /* Tertiary */
    public static let gkvSysColorTertiaryContainer = UIColor(red: 1.000, green: 0.847, blue: 0.894, alpha: 1) /* Tertiary container */
    public static let gkvSysColorTertiaryContainerDark = UIColor(red: 0.388, green: 0.231, blue: 0.282, alpha: 1) /* Tertiary container */
    public static let gkvSysColorTertiaryContainerLight = UIColor(red: 1.000, green: 0.847, blue: 0.894, alpha: 1) /* Tertiary container */
    public static let gkvSysColorTertiaryDark = UIColor(red: 0.937, green: 0.722, blue: 0.784, alpha: 1) /* Tertiary */
    public static let gkvSysColorTertiaryLight = UIColor(red: 0.490, green: 0.322, blue: 0.376, alpha: 1) /* Tertiary */
    public static let gkvSysTypescaleBodyLargeFamily = Roboto
    public static let gkvSysTypescaleBodyLargeWeight = 400
    public static let gkvSysTypescaleBodyMediumFamily = Roboto
    public static let gkvSysTypescaleBodyMediumWeight = 400
    public static let gkvSysTypescaleBodySmallFamily = Roboto
    public static let gkvSysTypescaleBodySmallWeight = 400
    public static let gkvSysTypescaleDisplayLargeFamily = Roboto
    public static let gkvSysTypescaleDisplayLargeWeight = 400
    public static let gkvSysTypescaleDisplayMediumFamily = Roboto
    public static let gkvSysTypescaleDisplayMediumWeight = 400
    public static let gkvSysTypescaleDisplaySmallFamily = Roboto
    public static let gkvSysTypescaleDisplaySmallWeight = 400
    public static let gkvSysTypescaleHeadlineLargeFamily = Roboto
    public static let gkvSysTypescaleHeadlineLargeWeight = 400
    public static let gkvSysTypescaleHeadlineMediumFamily = Roboto
    public static let gkvSysTypescaleHeadlineMediumWeight = 400
    public static let gkvSysTypescaleHeadlineSmallFamily = Roboto
    public static let gkvSysTypescaleHeadlineSmallWeight = 400
    public static let gkvSysTypescaleLabelLargeFamily = Roboto
    public static let gkvSysTypescaleLabelLargeWeight = 500
    public static let gkvSysTypescaleLabelMediumFamily = Roboto
    public static let gkvSysTypescaleLabelMediumWeight = 500
    public static let gkvSysTypescaleLabelSmallFamily = Roboto
    public static let gkvSysTypescaleLabelSmallWeight = 500
    public static let gkvSysTypescaleTitleLargeFamily = Roboto
    public static let gkvSysTypescaleTitleLargeWeight = 400
    public static let gkvSysTypescaleTitleMediumFamily = Roboto
    public static let gkvSysTypescaleTitleMediumWeight = 500
    public static let gkvSysTypescaleTitleSmallFamily = Roboto
    public static let gkvSysTypescaleTitleSmallWeight = 500
}
