
//
// style_dictionary.dart
//

// Do not edit directly
// Generated on Tue, 15 Aug 2023 03:43:46 GMT



import 'dart:ui';

class StyleDictionary {
  StyleDictionary._();

    static const gkvRefPaletteBlack = Color(0xFF000000); /* Black */
    static const gkvRefPaletteError0 = Color(0xFF000000); /* Error 0 */
    static const gkvRefPaletteError10 = Color(0xFF410E0B); /* Error 10 */
    static const gkvRefPaletteError100 = Color(0xFFFFFFFF); /* Error 100 */
    static const gkvRefPaletteError20 = Color(0xFF601410); /* Error 20 */
    static const gkvRefPaletteError30 = Color(0xFF8C1D18); /* Error 30 */
    static const gkvRefPaletteError40 = Color(0xFFB3261E); /* Error 40 */
    static const gkvRefPaletteError50 = Color(0xFFDC362E); /* Error 50 */
    static const gkvRefPaletteError60 = Color(0xFFE46962); /* Error 60 */
    static const gkvRefPaletteError70 = Color(0xFFEC928E); /* Error 70 */
    static const gkvRefPaletteError80 = Color(0xFFF2B8B5); /* Error 80 */
    static const gkvRefPaletteError90 = Color(0xFFF9DEDC); /* Error 90 */
    static const gkvRefPaletteError95 = Color(0xFFFCEEEE); /* Error 95 */
    static const gkvRefPaletteError99 = Color(0xFFFFFBF9); /* Error 99 */
    static const gkvRefPaletteNeutral0 = Color(0xFF000000); /* Neutral 0 */
    static const gkvRefPaletteNeutral10 = Color(0xFF1C1B1F); /* Neutral 10 */
    static const gkvRefPaletteNeutral100 = Color(0xFFFFFFFF); /* Neutral 100 */
    static const gkvRefPaletteNeutral20 = Color(0xFF313033); /* Neutral 20 */
    static const gkvRefPaletteNeutral30 = Color(0xFF484649); /* Neutral 30 */
    static const gkvRefPaletteNeutral40 = Color(0xFF605D62); /* Neutral 40 */
    static const gkvRefPaletteNeutral50 = Color(0xFF787579); /* Neutral 50 */
    static const gkvRefPaletteNeutral60 = Color(0xFF939094); /* Neutral 60 */
    static const gkvRefPaletteNeutral70 = Color(0xFFAEAAAE); /* Neutral 70 */
    static const gkvRefPaletteNeutral80 = Color(0xFFC9C5CA); /* Neutral 80 */
    static const gkvRefPaletteNeutral90 = Color(0xFFE6E1E5); /* Neutral 90 */
    static const gkvRefPaletteNeutral95 = Color(0xFFF4EFF4); /* Neutral 95 */
    static const gkvRefPaletteNeutral99 = Color(0xFFFFFBFE); /* Neutral 99 */
    static const gkvRefPaletteNeutralVariant0 = Color(0xFF000000); /* Neutral Variant 0 */
    static const gkvRefPaletteNeutralVariant10 = Color(0xFF1D1A22); /* Neutral Variant 10 */
    static const gkvRefPaletteNeutralVariant100 = Color(0xFFFFFFFF); /* Neutral Variant 100 */
    static const gkvRefPaletteNeutralVariant20 = Color(0xFF322F37); /* Neutral Variant 20 */
    static const gkvRefPaletteNeutralVariant30 = Color(0xFF49454F); /* Neutral Variant 30 */
    static const gkvRefPaletteNeutralVariant40 = Color(0xFF605D66); /* Neutral Variant 40 */
    static const gkvRefPaletteNeutralVariant50 = Color(0xFF79747E); /* Neutral Variant 50 */
    static const gkvRefPaletteNeutralVariant60 = Color(0xFF938F99); /* Neutral Variant 60 */
    static const gkvRefPaletteNeutralVariant70 = Color(0xFFAEA9B4); /* Neutral Variant 70 */
    static const gkvRefPaletteNeutralVariant80 = Color(0xFFCAC4D0); /* Neutral Variant 80 */
    static const gkvRefPaletteNeutralVariant90 = Color(0xFFE7E0EC); /* Neutral Variant 90 */
    static const gkvRefPaletteNeutralVariant95 = Color(0xFFF5EEFA); /* Neutral Variant 95 */
    static const gkvRefPaletteNeutralVariant99 = Color(0xFFFFFBFE); /* Neutral Variant 99 */
    static const gkvRefPalettePrimary0 = Color(0xFF000000); /* Primary 0 */
    static const gkvRefPalettePrimary10 = Color(0xFF21005D); /* Primary 10 */
    static const gkvRefPalettePrimary100 = Color(0xFFFFFFFF); /* Primary 100 */
    static const gkvRefPalettePrimary20 = Color(0xFF381E72); /* Primary 20 */
    static const gkvRefPalettePrimary30 = Color(0xFF4F378B); /* Primary 30 */
    static const gkvRefPalettePrimary40 = Color(0xFF6750A4); /* Primary 40 */
    static const gkvRefPalettePrimary50 = Color(0xFF7F67BE); /* Primary 50 */
    static const gkvRefPalettePrimary60 = Color(0xFF9A82DB); /* Primary 60 */
    static const gkvRefPalettePrimary70 = Color(0xFFB69DF8); /* Primary 70 */
    static const gkvRefPalettePrimary80 = Color(0xFFD0BCFF); /* Primary 80 */
    static const gkvRefPalettePrimary90 = Color(0xFFEADDFF); /* Primary 90 */
    static const gkvRefPalettePrimary95 = Color(0xFFF6EDFF); /* Primary 95 */
    static const gkvRefPalettePrimary99 = Color(0xFFFFFBFE); /* Primary 99 */
    static const gkvRefPaletteSecondary0 = Color(0xFF000000); /* Secondary 0 */
    static const gkvRefPaletteSecondary10 = Color(0xFF1D192B); /* Secondary 10 */
    static const gkvRefPaletteSecondary100 = Color(0xFFFFFFFF); /* Secondary 100 */
    static const gkvRefPaletteSecondary20 = Color(0xFF332D41); /* Secondary 20 */
    static const gkvRefPaletteSecondary30 = Color(0xFF4A4458); /* Secondary 30 */
    static const gkvRefPaletteSecondary40 = Color(0xFF625B71); /* Secondary 40 */
    static const gkvRefPaletteSecondary50 = Color(0xFF7A7289); /* Secondary 50 */
    static const gkvRefPaletteSecondary60 = Color(0xFF958DA5); /* Secondary 60 */
    static const gkvRefPaletteSecondary70 = Color(0xFFB0A7C0); /* Secondary 70 */
    static const gkvRefPaletteSecondary80 = Color(0xFFCCC2DC); /* Secondary 80 */
    static const gkvRefPaletteSecondary90 = Color(0xFFE8DEF8); /* Secondary 90 */
    static const gkvRefPaletteSecondary95 = Color(0xFFF6EDFF); /* Secondary 95 */
    static const gkvRefPaletteSecondary99 = Color(0xFFFFFBFE); /* Secondary 99 */
    static const gkvRefPaletteTertiary0 = Color(0xFF000000); /* Tertiary 0 */
    static const gkvRefPaletteTertiary10 = Color(0xFF31111D); /* Tertiary 10 */
    static const gkvRefPaletteTertiary100 = Color(0xFFFFFFFF); /* Tertiary 100 */
    static const gkvRefPaletteTertiary20 = Color(0xFF492532); /* Tertiary 20 */
    static const gkvRefPaletteTertiary30 = Color(0xFF633B48); /* Tertiary 30 */
    static const gkvRefPaletteTertiary40 = Color(0xFF7D5260); /* Tertiary 40 */
    static const gkvRefPaletteTertiary50 = Color(0xFF986977); /* Tertiary 50 */
    static const gkvRefPaletteTertiary60 = Color(0xFFB58392); /* Tertiary 60 */
    static const gkvRefPaletteTertiary70 = Color(0xFFD29DAC); /* Tertiary 70 */
    static const gkvRefPaletteTertiary80 = Color(0xFFEFB8C8); /* Tertiary 80 */
    static const gkvRefPaletteTertiary90 = Color(0xFFFFD8E4); /* Tertiary 90 */
    static const gkvRefPaletteTertiary95 = Color(0xFFFFECF1); /* Tertiary 95 */
    static const gkvRefPaletteTertiary99 = Color(0xFFFFFBFA); /* Tertiary 99 */
    static const gkvRefPaletteWhite = Color(0xFFFFFFFF); /* White */
    static const gkvRefTypefaceBrand = Roboto; /* Brand typeface */
    static const gkvRefTypefacePlain = Roboto; /* Plain typeface */
    static const gkvRefTypefaceWeightBold = 700; /* Bold weight */
    static const gkvRefTypefaceWeightMedium = 500; /* Medium weight */
    static const gkvRefTypefaceWeightRegular = 400; /* Regular weight */
    static const gkvSysColorBackground = Color(0xFFFFFBFE); /* Background */
    static const gkvSysColorBackgroundDark = Color(0xFF1C1B1F); /* Background */
    static const gkvSysColorBackgroundLight = Color(0xFFFFFBFE); /* Background */
    static const gkvSysColorError = Color(0xFFB3261E); /* Error */
    static const gkvSysColorErrorContainer = Color(0xFFF9DEDC); /* Error container */
    static const gkvSysColorErrorContainerDark = Color(0xFF8C1D18); /* Error container */
    static const gkvSysColorErrorContainerLight = Color(0xFFF9DEDC); /* Error container */
    static const gkvSysColorErrorDark = Color(0xFFF2B8B5); /* Error */
    static const gkvSysColorErrorLight = Color(0xFFB3261E); /* Error */
    static const gkvSysColorInverseOnSurface = Color(0xFFF4EFF4); /* Inverse on surface */
    static const gkvSysColorInverseOnSurfaceDark = Color(0xFF313033); /* Inverse on surface */
    static const gkvSysColorInverseOnSurfaceLight = Color(0xFFF4EFF4); /* Inverse on surface */
    static const gkvSysColorInversePrimary = Color(0xFFD0BCFF); /* Inverse primary */
    static const gkvSysColorInversePrimaryDark = Color(0xFF6750A4); /* Inverse primary */
    static const gkvSysColorInversePrimaryLight = Color(0xFFD0BCFF); /* Inverse primary */
    static const gkvSysColorInverseSurface = Color(0xFF313033); /* Inverse surface */
    static const gkvSysColorInverseSurfaceDark = Color(0xFFE6E1E5); /* Inverse surface */
    static const gkvSysColorInverseSurfaceLight = Color(0xFF313033); /* Inverse surface */
    static const gkvSysColorOnBackground = Color(0xFF1C1B1F); /* On background */
    static const gkvSysColorOnBackgroundDark = Color(0xFFE6E1E5); /* On background */
    static const gkvSysColorOnBackgroundLight = Color(0xFF1C1B1F); /* On background */
    static const gkvSysColorOnError = Color(0xFFFFFFFF); /* On error */
    static const gkvSysColorOnErrorContainer = Color(0xFF410E0B); /* On error container */
    static const gkvSysColorOnErrorContainerDark = Color(0xFFF2B8B5); /* On error container */
    static const gkvSysColorOnErrorContainerLight = Color(0xFF410E0B); /* On error container */
    static const gkvSysColorOnErrorDark = Color(0xFF601410); /* On error */
    static const gkvSysColorOnErrorLight = Color(0xFFFFFFFF); /* On error */
    static const gkvSysColorOnPrimary = Color(0xFFFFFFFF); /* On primary */
    static const gkvSysColorOnPrimaryContainer = Color(0xFF21005D); /* On primary container */
    static const gkvSysColorOnPrimaryContainerDark = Color(0xFFEADDFF); /* On primary container */
    static const gkvSysColorOnPrimaryContainerLight = Color(0xFF21005D); /* On primary container */
    static const gkvSysColorOnPrimaryDark = Color(0xFF381E72); /* On primary */
    static const gkvSysColorOnPrimaryLight = Color(0xFFFFFFFF); /* On primary */
    static const gkvSysColorOnSecondary = Color(0xFFFFFFFF); /* On secondary */
    static const gkvSysColorOnSecondaryContainer = Color(0xFF1D192B); /* On secondary container */
    static const gkvSysColorOnSecondaryContainerDark = Color(0xFFE8DEF8); /* On secondary container */
    static const gkvSysColorOnSecondaryContainerLight = Color(0xFF1D192B); /* On secondary container */
    static const gkvSysColorOnSecondaryDark = Color(0xFF332D41); /* On secondary */
    static const gkvSysColorOnSecondaryLight = Color(0xFFFFFFFF); /* On secondary */
    static const gkvSysColorOnSurface = Color(0xFF1C1B1F); /* On surface */
    static const gkvSysColorOnSurfaceDark = Color(0xFFE6E1E5); /* On surface */
    static const gkvSysColorOnSurfaceLight = Color(0xFF1C1B1F); /* On surface */
    static const gkvSysColorOnSurfaceVariant = Color(0xFF49454F); /* On surface variant */
    static const gkvSysColorOnSurfaceVariantDark = Color(0xFFCAC4D0); /* On surface variant */
    static const gkvSysColorOnSurfaceVariantLight = Color(0xFF49454F); /* On surface variant */
    static const gkvSysColorOnTertiary = Color(0xFFFFFFFF); /* On tertiary */
    static const gkvSysColorOnTertiaryContainer = Color(0xFF31111D); /* On tertiary container */
    static const gkvSysColorOnTertiaryContainerDark = Color(0xFFFFD8E4); /* On tertiary container */
    static const gkvSysColorOnTertiaryContainerLight = Color(0xFF31111D); /* On tertiary container */
    static const gkvSysColorOnTertiaryDark = Color(0xFF492532); /* On tertiary */
    static const gkvSysColorOnTertiaryLight = Color(0xFFFFFFFF); /* On tertiary */
    static const gkvSysColorOutline = Color(0xFF79747E); /* Outline */
    static const gkvSysColorOutlineDark = Color(0xFF938F99); /* Outline */
    static const gkvSysColorOutlineLight = Color(0xFF79747E); /* Outline */
    static const gkvSysColorPrimary = Color(0xFF6750A4); /* Primary */
    static const gkvSysColorPrimaryContainer = Color(0xFFEADDFF); /* Primary container */
    static const gkvSysColorPrimaryContainerDark = Color(0xFF4F378B); /* Primary container */
    static const gkvSysColorPrimaryContainerLight = Color(0xFFEADDFF); /* Primary container */
    static const gkvSysColorPrimaryDark = Color(0xFFD0BCFF); /* Primary */
    static const gkvSysColorPrimaryLight = Color(0xFF6750A4); /* Primary */
    static const gkvSysColorSecondary = Color(0xFF625B71); /* Secondary */
    static const gkvSysColorSecondaryContainer = Color(0xFFE8DEF8); /* Secondary container */
    static const gkvSysColorSecondaryContainerDark = Color(0xFF4A4458); /* Secondary container */
    static const gkvSysColorSecondaryContainerLight = Color(0xFFE8DEF8); /* Secondary container */
    static const gkvSysColorSecondaryDark = Color(0xFFCCC2DC); /* Secondary */
    static const gkvSysColorSecondaryLight = Color(0xFF625B71); /* Secondary */
    static const gkvSysColorShadow = Color(0xFF000000); /* Shadow */
    static const gkvSysColorShadowDark = Color(0xFF000000); /* Shadow */
    static const gkvSysColorShadowLight = Color(0xFF000000); /* Shadow */
    static const gkvSysColorSurface = Color(0xFFFFFBFE); /* Surface */
    static const gkvSysColorSurfaceDark = Color(0xFF1C1B1F); /* Surface */
    static const gkvSysColorSurfaceLight = Color(0xFFFFFBFE); /* Surface */
    static const gkvSysColorSurfaceTint = Color(0xFF6750A4); /* Surface tint */
    static const gkvSysColorSurfaceTintDark = Color(0xFF6750A4); /* Surface tint */
    static const gkvSysColorSurfaceTintLight = Color(0xFF6750A4); /* Surface tint */
    static const gkvSysColorSurfaceVariant = Color(0xFFE7E0EC); /* Surface Variant */
    static const gkvSysColorSurfaceVariantDark = Color(0xFF49454F); /* Surface Variant */
    static const gkvSysColorSurfaceVariantLight = Color(0xFFE7E0EC); /* Surface Variant */
    static const gkvSysColorTertiary = Color(0xFF7D5260); /* Tertiary */
    static const gkvSysColorTertiaryContainer = Color(0xFFFFD8E4); /* Tertiary container */
    static const gkvSysColorTertiaryContainerDark = Color(0xFF633B48); /* Tertiary container */
    static const gkvSysColorTertiaryContainerLight = Color(0xFFFFD8E4); /* Tertiary container */
    static const gkvSysColorTertiaryDark = Color(0xFFEFB8C8); /* Tertiary */
    static const gkvSysColorTertiaryLight = Color(0xFF7D5260); /* Tertiary */
    static const gkvSysTypescaleBodyLargeFamily = Roboto;
    static const gkvSysTypescaleBodyLargeWeight = 400;
    static const gkvSysTypescaleBodyMediumFamily = Roboto;
    static const gkvSysTypescaleBodyMediumWeight = 400;
    static const gkvSysTypescaleBodySmallFamily = Roboto;
    static const gkvSysTypescaleBodySmallWeight = 400;
    static const gkvSysTypescaleDisplayLargeFamily = Roboto;
    static const gkvSysTypescaleDisplayLargeWeight = 400;
    static const gkvSysTypescaleDisplayMediumFamily = Roboto;
    static const gkvSysTypescaleDisplayMediumWeight = 400;
    static const gkvSysTypescaleDisplaySmallFamily = Roboto;
    static const gkvSysTypescaleDisplaySmallWeight = 400;
    static const gkvSysTypescaleHeadlineLargeFamily = Roboto;
    static const gkvSysTypescaleHeadlineLargeWeight = 400;
    static const gkvSysTypescaleHeadlineMediumFamily = Roboto;
    static const gkvSysTypescaleHeadlineMediumWeight = 400;
    static const gkvSysTypescaleHeadlineSmallFamily = Roboto;
    static const gkvSysTypescaleHeadlineSmallWeight = 400;
    static const gkvSysTypescaleLabelLargeFamily = Roboto;
    static const gkvSysTypescaleLabelLargeWeight = 500;
    static const gkvSysTypescaleLabelMediumFamily = Roboto;
    static const gkvSysTypescaleLabelMediumWeight = 500;
    static const gkvSysTypescaleLabelSmallFamily = Roboto;
    static const gkvSysTypescaleLabelSmallWeight = 500;
    static const gkvSysTypescaleTitleLargeFamily = Roboto;
    static const gkvSysTypescaleTitleLargeWeight = 400;
    static const gkvSysTypescaleTitleMediumFamily = Roboto;
    static const gkvSysTypescaleTitleMediumWeight = 500;
    static const gkvSysTypescaleTitleSmallFamily = Roboto;
    static const gkvSysTypescaleTitleSmallWeight = 500;
}
